package exploit;

import attackerProfile.AttackerProfile;
import attackerProfile.Skill;
import systemModel.Exploitable;
import types.Resources;

/**
 * Generated for each exploitable and rated according to a tasks meta information and
 * circumstances.
 * @author Martin Salfer
 * @version 1.0
 * @created 12-Nov-2013 16:18:09
 */
public class PotentialExploit extends Exploit {

	@Deprecated
	public PotentialExploit(String name, Exploitable t){
		this(name, t, false, true, false, new Resources(1_000d,0d), new Resources(1_000d,0d));
	}

	
	
	/**
	 * A potential exploit carries no cost, i.e. the crawler will preferably choose such an exploit.
	 * @param string
	 * @param t
	 * @param b
	 * @param c
	 * @param d
	 */
	public PotentialExploit(String string, Exploitable t, boolean b, boolean c, boolean d) {
		this(string, t, b, c, d, new Resources(0d, 0d), new Resources(0d, 0d));
	}
	/**
	 * A Potential Exploit models attack vector against a Software target.
	 * @param name names this Potential Exploit.
	 * @param target is the Software to attack.
	 * @param creationEffort is the effort that we assume an attacker is going to spend. 
	 */
	public PotentialExploit(String name, Exploitable target, Resources creationEffort) {
		this(name, target, creationEffort, new Resources(0,0d));
	}
	
	public PotentialExploit(String name, Exploitable target, Resources creationEffort, Resources adaptionEffort) {
		this(name, target, false, true, false, creationEffort, adaptionEffort);
	}
	
	
	public PotentialExploit(String name, Exploitable target, boolean dosAble, boolean controlAble, boolean brickAble, Resources creationEffort, Resources adaptionEffort) {
		super(name, target, dosAble, controlAble, brickAble, creationEffort, adaptionEffort);
	}



	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Potential Exploit [" + name + "]";
	}

	public void finalize() throws Throwable {
		super.finalize();
	}
	
	
	/**
	 * The costs for exploit application for a certain attacker.
	 * 
	 * Depending on skills of an attacker and the requirements of the exploit.
	 * Skills and reqs are weightened.
	 * Overwritten, for making it faster. (without adaption effort calculation)
	 * @param attacker
	 * @return Necessary resources.
	 */
	@Override
	public Resources costsForAttacker(AttackerProfile attacker) {
		Resources cost = creationEffort;
//		Resources cost = new Resources(creationEffort).addWith(adaptionEffort);
		if (!requiredSkills.isEmpty()) { // for speed improvement to not execute keySet() unnecessarily.
			for (Skill s : requiredSkills.keySet()) {
//			 for all required skills. Multiply all skills and how those are necessary. Standard value is 1 (average person)
				cost = cost.multiplyWith(getRecommendedSkillProficiency(s) / attacker.availableProficiencyForSkill(s));
			}
		}
		return cost;
	}
	
	
}//end Potential Exploit