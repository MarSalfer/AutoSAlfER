/**
 * 
 */
package exploit;

import static org.junit.Assert.fail;

import java.util.HashSet;
import java.util.Set;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import systemModel.Software;
import types.Resources;

/**
 * @author Martin Salfer
 *
 */
public class ExploitTest {

	Set<Exploit> exploits = new HashSet<Exploit>();
	
	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		Software browser = new Software("Browser");
		Exploit a = new KnownExploit("Browser Exploit CVE-2013-3199", browser, true, true, false);
		Exploit ex1 = new PotentialExploit("Attractor Extraction #1", browser, false, false, false);
		
		Software paymentSw = new Software("PaymentSoftware");
		Exploit b = new PotentialExploit("dBus Payment Exploit", paymentSw, true, true, false);
		Exploit ex2 = new PotentialExploit("Attractor Extraction #2", paymentSw, false, false, false);
//		Exploit ex3 = new Exploit("Attractor Extraction #3", false, false, false);
		
		// TODO Diese Exploitkosten m√ºssen noch oben in die Deklarationen und Konstruktoren eingearbeitet werden. 
//		a.setCosts(new Resources(5_000d,4_000d));
//		ex1.setCosts(new Resources(1_000, 500));
//		b.setCosts(new Resources(100_000,50_000));
//		ex2.setCosts(new Resources(5_000,1_000));
//		ex3.setcosts(new Resources())
		
		exploits.add(a);
		exploits.add(b);
		exploits.add(ex1);
		exploits.add(ex2);
	}
	
	

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
		exploits.clear();
	}

	/**
	 * Test method for {@link exploit.Exploit#Exploit()}.
	 */
	@Test
	public final void testExploit() {
		System.out.print("ExploitTest...");
		if (exploits.size() <= 0)
			fail("No exploits in the test set.");
		for (Exploit x : exploits)
			org.junit.Assert.assertNotNull(x);
		System.out.println("done.");
	}

}
